void player::helper(result& res  , const board& b)
{
	bool flag=false;
	/* This is what will AI do on the pseudo board*/
	for ( int i=0 ; i<3 ; i++)
			{
				for ( int j=0 ; j<3 ; j++)
				{
					board tempBoard=b;
					if(tempBoard.mMatrix[i][j]==NONE)
						{
							tempBoard.mMatrix[i][j]=KNOT;
							if(tempBoard.checkGameState()==WIN)
							{
								res=WIN;
								flag=true;
								break;	
							}
							else 
								generateStatesAtLevel( res , tempBoard);
						}	
				}
				if(flag==true)
				break;		
			}
}



/* If we found the winning move in out\r move only.
	That should be our fist priority*/
   	for( int i = 0  ; i<3 ; i++)
   		{
   			for ( int j=0 ; j<3 ; j++)
   			{ 
   				board tempBoard=b;
   				if(tempBoard.mMatrix[i][j]==NONE)
   				{
   					tempBoard.mMatrix[i][j]=KNOT;
   					if(tempBoard.checkGameState()==WIN)
   					{/*AI is winning*/
   						res=WIN;
   						p.r=i; p.c=j;
   						flag=true; 
   						break;
   					}
   	   			}
   			}
   			if(flag==true)
   				{ break;}
   		}		

   	/*If we didn't find the winning move in our chance . 
   	  Second priority should be stoping the Human from winning.
   	*/
   	  if(flag==false)
   	  {
   	  	
   	  	for(int k=0 ; k<3 ; k++)
   	  	{	
   	  		for (int l=0 ; l<3 ; l++)
   	  		{
   	  			board tempBoard=b;
   	  			if(tempBoard.mMatrix[k][l]==NONE)
					{
						
						tempBoard.mMatrix[k][l]=CROSS;
						if(tempBoard.checkGameState()==LOSS)
   						{/*Human is winning*/	
   							p.r=k; p.c=l;
   							flag=true; 
   							break;
   						}
					}
   	  		}
   	  		if(flag==true)
   	  			break;	
   	 	} 
   	  }
   	  